import numpy as np
x = np.array(([2,9],[1,5],[3,6]), dtype = float)
y = np.array(([92],[86],[89]), dtype = float)
x = x/np.amax(x, axis = 0)
y = y/100
def sigmoid(x):
    return 1/(1+np.exp(-x))
def derivatives_sigmoid(x):
    return x*(1-x)
epoch = 10
lr = 0.1
inputLayerNeurons = 2
hiddenLayerNeurons = 3
outputNeurons = 1
wh = np.random.uniform(size=(inputLayerNeurons, hiddenLayerNeurons))
bh = np.random.uniform(size=(1, hiddenLayerNeurons))
wout = np.random.uniform(size=(hiddenLayerNeurons, outputNeurons))
bout = np.random.uniform(size=(1, outputNeurons))
for i in range(epoch):
    hinp1 = np.dot(x, wh)
    hinp = hinp1 + bh
    hLayerAct = sigmoid(hinp)
    outinp1 = np.dot(hLayerAct, wout)
    outinp = outinp1 + bout
    output = sigmoid(outinp)
    
    eo = y - output
    print("epoch = ", i, "eo = ", eo)
    outgrad = derivatives_sigmoid(output)
    d_output = eo*outgrad
    eh = d_output.dot(wout.T)
    
    hiddengrad = derivatives_sigmoid(hLayerAct)
    d_hiddenLayer = eh*hiddengrad
    
    wout += hLayerAct.T.dot(d_output)*lr
    wh += x.T.dot(d_hiddenLayer)*lr
print("input: \n" + str(x))
print("actual output: \n" + str(y))
print("predicted output: \n", output)
